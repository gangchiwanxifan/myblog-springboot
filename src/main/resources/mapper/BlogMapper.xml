<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="myblog.mapper.BlogMapper">

    <resultMap id="BlogList" type="BlogList">
        <result property="blogId" column="blog_id"/>
        <result property="blogTitle" column="blog_title"/>
        <result property="blogAuthorId" column="blog_author_id"/>
        <result property="nickname" column="nickname"/>
        <result property="blogTags" column="blog_tags"/>
        <result property="blogAvatar" column="blog_avatar"/>
        <result property="blogDescription" column="blog_description"/>
        <result property="favoriteCount" column="favorite_count"/>
        <result property="commentCount" column="comment_count"/>
        <result property="blogViews" column="blog_views"/>
        <result property="avatar" column="avatar"/>
    </resultMap>

    <resultMap id="BlogDetail" type="BlogDetail">
        <result property="blogId" column="blog_id"/>
        <result property="blogTitle" column="blog_title"/>
        <result property="blogAuthorId" column="blog_author_id"/>
        <result property="nickname" column="nickname"/>
        <result property="avatar" column="avatar"/>
        <result property="blogTags" column="blog_tags"/>
        <result property="blogChannelId" column="blog_channel_id"/>
        <result property="channelName" column="channel_name"/>
        <result property="blogContent" column="blog_content"/>
        <result property="updateTime" column="update_time"/>
        <result property="blogViews" column="blog_views"/>
        <result property="introduction" column="introduction"/>
    </resultMap>

    <select id="getBlogList" resultMap="BlogList">
        SELECT
            blog_id,
            blog_title,
            blog_author_id,
            nickname,
            blog_tags,
            blog_avatar,
            blog_description,
            COUNT(DISTINCT(favorite_id)) favorite_count,
            COUNT(DISTINCT(comment_id)) comment_count,
            blog_views,
            avatar
        FROM
            blog
            LEFT JOIN `user`
            ON blog_author_id = user_id
            LEFT JOIN favorite
            ON blog_id = favorite_blog_id
            LEFT JOIN `comment`
            ON blog_id = comment_blog_id
        where blog.is_deleted = 0 and blog_status = 0
        GROUP BY
            blog_id
        ORDER BY
            blog.create_time DESC
    </select>

    <select id="getChannelList" resultMap="BlogList">
        SELECT
            blog_id,
            blog_title,
            blog_author_id,
            nickname,
            blog_tags,
            blog_avatar,
            blog_description,
            COUNT(DISTINCT(favorite_id)) favorite_count,
            COUNT(DISTINCT(comment_id)) comment_count,
            blog_views
        FROM
            blog
                LEFT JOIN `user`
                          ON blog_author_id = user_id
                LEFT JOIN favorite
                          ON blog_id = favorite_blog_id
                LEFT JOIN `comment`
                          ON blog_id = comment_blog_id
        where blog_channel_id = #{channelId} and blog.is_deleted = 0 and blog_status = 0
        GROUP BY
            blog_id
        ORDER BY
        <if test="sortByViews == false">
            blog.create_time DESC
        </if>
        <if test="sortByViews == true">
            blog_views DESC
        </if>
    </select>

    <select id="getBlogDetail" resultMap="BlogDetail">
        SELECT
            blog_id,
            blog_title,
            blog_author_id,
            nickname,
            avatar,
            blog_tags,
            blog_channel_id,
            channel_name,
            blog_content,
            update_time,
            blog_views,
            introduction
        FROM
            blog
                LEFT JOIN `user` ON blog_author_id = user_id
                LEFT JOIN channel ON blog_channel_id = channel_id
        WHERE
            blog.is_deleted = 0 AND blog_status = 0 AND blog_id = #{blogId}
    </select>

    <select id="getHotList" resultType="Blog">
        select blog_id, blog_title from blog where blog.is_deleted = 0 AND blog_status = 0 order by blog_views desc limit 5;
    </select>

    <select id="getListById" parameterType="Blog" resultType="Blog">
        select blog_id, blog_avatar, blog_title, blog_description, update_time
        from blog
        where blog_status = 0 and is_deleted = 0
        <if test="blogAuthorId != null">
            and blog_author_id = #{blogAuthorId}
        </if>
        <if test="blogCatagoryId != null">
            and blog_catagory_id = #{blogCatagoryId}
        </if>
    </select>

    <select id="getFavoriteById" resultMap="BlogList">
        SELECT
            blog_id,
            blog_title,
            blog_author_id,
            nickname,
            blog_tags,
            blog_avatar,
            blog_description,
            COUNT(DISTINCT(favorite_id)) favorite_count,
            COUNT(DISTINCT(comment_id)) comment_count,
            blog_views,
            avatar
        FROM
            blog
                LEFT JOIN `user`
                          ON blog_author_id = user_id
                LEFT JOIN favorite
                          ON blog_id = favorite_blog_id
                LEFT JOIN `comment`
                          ON blog_id = comment_blog_id
        where blog.is_deleted = 0 and blog_status = 0 and favorite_user_id = #{userId}
        GROUP BY
            blog_id
    </select>



</mapper>
